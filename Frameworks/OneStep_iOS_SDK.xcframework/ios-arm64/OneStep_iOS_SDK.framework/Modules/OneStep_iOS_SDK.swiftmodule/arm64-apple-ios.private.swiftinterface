// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OneStep_iOS_SDK
import BackgroundTasks
import Combine
import CoreData
import CoreLocation
import CoreMotion
import CryptoKit
import Foundation
import Foundation/*.Data*/
import Network
@_exported import OneStep_iOS_SDK
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
extension OneStep_iOS_SDK.BackgroundSample {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OneStep_iOS_SDK.BackgroundSample>
  @objc @NSManaged dynamic public var createdAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isUploaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sensorsData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
}
public struct OneStepUserProfile {
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let profileImageUrl: Swift.String?
  public let dateOfBirth: Swift.String?
  public let emrId: Swift.String?
  public let phoneNumber: Swift.String?
  public let email: Swift.String?
  public let sex: Swift.String?
  public let heightCm: Swift.Int?
  public let weightKg: Swift.Int?
  public init(firstName: Swift.String?, lastName: Swift.String?, profileImageUrl: Swift.String?, dateOfBirth: Swift.String?, emrId: Swift.String?, phoneNumber: Swift.String?, email: Swift.String?, sex: Swift.String?, heightCm: Swift.Int?, weightKg: Swift.Int?)
}
public struct JSONDecoderClient {
}
@_inheritsConvenienceInitializers @objc(BackgroundWalk) public class BackgroundWalk : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MotionMeasurement) public class MotionMeasurement : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public struct MotionMeasurementOut : Swift.Codable {
  public var id: Foundation.UUID
  public var type: Swift.String
  public var timestamp: Foundation.Date
  public var status: Swift.Int
  public var error: OneStep_iOS_SDK.SDKMeasurementError?
  public var result_state: Swift.Int?
  public var metadata: OneStep_iOS_SDK.MeasurementMetadataOut?
  public var parameters: Swift.Dictionary<Swift.String, Swift.Double>?
  public init(id: Foundation.UUID, status: Swift.Int, error: OneStep_iOS_SDK.SDKMeasurementError? = nil, result_state: Swift.Int? = nil, timestamp: Foundation.Date, type: Swift.String, metadata: OneStep_iOS_SDK.MeasurementMetadataOut? = nil, parameters: Swift.Dictionary<Swift.String, Swift.Double>? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SDKMeasurementError : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MeasurementMetadataOut : Swift.Codable {
  public var locale: Swift.String?
  public var seconds: Swift.Int?
  public var steps: Swift.Int?
  public var geo_lat: Swift.Int?
  public var geo_lng: Swift.Int?
  public var tags: [Swift.String]?
  public var note: Swift.String?
  public init(locale: Swift.String? = nil, seconds: Swift.Int? = nil, steps: Swift.Int? = nil, geo_lat: Swift.Int? = nil, geo_lng: Swift.Int? = nil, tags: [Swift.String]? = nil, note: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: OneStep_iOS_SDK.CompressionLevel
  public static let bestSpeed: OneStep_iOS_SDK.CompressionLevel
  public static let bestCompression: OneStep_iOS_SDK.CompressionLevel
  public static let defaultCompression: OneStep_iOS_SDK.CompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct GzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: OneStep_iOS_SDK.GzipError.Kind, b: OneStep_iOS_SDK.GzipError.Kind) -> Swift.Bool
  }
  public let kind: OneStep_iOS_SDK.GzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
extension Foundation.Data {
  public var isGzipped: Swift.Bool {
    get
  }
  public func gzipped(level: OneStep_iOS_SDK.CompressionLevel = .defaultCompression) throws -> Foundation.Data
  public func gunzipped() throws -> Foundation.Data
}
public struct OneStepBGWalkUI : Swift.Identifiable {
  public let id: Foundation.UUID
  public let timestamp: Foundation.Date?
  public let steps: Swift.Int?
  public let walkScore: Swift.Int?
  public let distance: Swift.Int?
  public let cadence: Swift.Int?
  public let cadenceVariability: Swift.Int?
  public let velocity: Swift.Int?
  public let velocityVariability: Swift.Int?
  public let consistency: Swift.Int?
  public let strideLength: Swift.Int?
  public let stepLengthLeft: Swift.Int?
  public let stepLengthRight: Swift.Int?
  public let stepLengthAsymmetry: Swift.Int?
  public let baseWidth: Swift.Int?
  public let doubleSupport: Swift.Int?
  public let singleSupportRight: Swift.Int?
  public let singleSupportLeft: Swift.Int?
  public let stanceRight: Swift.Int?
  public let stanceLeft: Swift.Int?
  public let stanceAsymmetry: Swift.Int?
  public let status: Swift.Int?
  public typealias ID = Foundation.UUID
}
@_hasMissingDesignatedInitializers public class OneStepSDKRecorder : OneStep_iOS_SDK.OneStepSimpleRecorderProtocol {
  public static let shared: OneStep_iOS_SDK.OneStepSDKRecorder
  public var recorderState: Combine.AnyPublisher<OneStep_iOS_SDK.OneStepSDKRecorderState, Swift.Never> {
    get
  }
  public func start(activityType: OneStep_iOS_SDK.ActivityType?, duration: Swift.Int?, userInputMetadata: OneStep_iOS_SDK.UserInputMetaData?, customMetadata: Swift.Dictionary<Swift.String, Any>?)
  public func stop()
  public func reset()
  public func analyze(uuid: Foundation.UUID)
  #if compiler(>=5.3) && $AsyncAwait
  public func analyzeRecordingManually(uuid: Foundation.UUID) async -> (Swift.Int, Swift.Int)?
  #endif
  public func getSummaryForMeasurement(uuid: Foundation.UUID) -> OneStep_iOS_SDK.MotionMeasurementOut?
  public func startInAppManualRecording() -> Foundation.UUID?
  #if compiler(>=5.3) && $AsyncAwait
  public func syncAllRecords() async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadAllAnalyzedWalksIntoDB() async throws
  #endif
  public func getAllInAppWalks() -> [OneStep_iOS_SDK.OneStepInAppWalkUI]
  public func getAllBGWalks() -> [OneStep_iOS_SDK.OneStepBGWalkUI]
  public func getAllBGSamples() -> [OneStep_iOS_SDK.OneStepBGSampleUI]
  public func removeMotionMeasurement(withId id: Foundation.UUID)
  public func removeBackgroundSample(withDate date: Foundation.Date)
  @objc deinit
}
public enum HTTPMethodd : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct NetworkClient {
  public typealias MultipartParameters = [Swift.String : Swift.String]
}
@_hasMissingDesignatedInitializers final public class OneStepSDKiOS : OneStep_iOS_SDK.OneStepSDKInterface {
  public static let shared: OneStep_iOS_SDK.OneStepSDKiOS
  final public var isConnected: Swift.Bool {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func initialize(orgUuid: Swift.String, apiKey: Swift.String, distinctId: Swift.String) async throws
  #endif
  final public func getRecorderService() -> any OneStep_iOS_SDK.OneStepSimpleRecorderProtocol
  final public func disconnect()
  #if compiler(>=5.3) && $AsyncAwait
  final public func getUserProfile() async throws -> OneStep_iOS_SDK.OneStepUserProfile?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func updateUserProfile(_ userProfile: OneStep_iOS_SDK.OneStepUserProfile) async throws
  #endif
  @objc deinit
}
public protocol OneStepSDKInterface {
  #if compiler(>=5.3) && $AsyncAwait
  func initialize(orgUuid: Swift.String, apiKey: Swift.String, distinctId: Swift.String) async throws
  #endif
  func getRecorderService() -> any OneStep_iOS_SDK.OneStepSimpleRecorderProtocol
}
public protocol OneStepSimpleRecorderProtocol {
  var recorderState: Combine.AnyPublisher<OneStep_iOS_SDK.OneStepSDKRecorderState, Swift.Never> { get }
  func start(activityType: OneStep_iOS_SDK.ActivityType?, duration: Swift.Int?, userInputMetadata: OneStep_iOS_SDK.UserInputMetaData?, customMetadata: Swift.Dictionary<Swift.String, Any>?)
  func stop()
  func reset()
  func analyze(uuid: Foundation.UUID)
  func getSummaryForMeasurement(uuid: Foundation.UUID) -> OneStep_iOS_SDK.MotionMeasurementOut?
}
public enum ActivityType {
  case Walk
  public static func == (a: OneStep_iOS_SDK.ActivityType, b: OneStep_iOS_SDK.ActivityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UserInputMetaData {
}
public struct WalkBG : Swift.Codable {
  public init(uuid: Foundation.UUID, timestamp: Foundation.Date?, steps: Swift.Double?, walkScore: Swift.Double?, distance: Swift.Double?, cadence: Swift.Double?, cadenceVariability: Swift.Double?, velocity: Swift.Double?, velocityVariability: Swift.Double?, consistency: Swift.Double?, strideLength: Swift.Double?, stepLengthLeft: Swift.Double?, stepLengthRight: Swift.Double?, stepLengthAsymmetry: Swift.Double?, baseWidth: Swift.Double?, doubleSupport: Swift.Double?, singleSupportRight: Swift.Double?, singleSupportLeft: Swift.Double?, stanceRight: Swift.Double?, stanceLeft: Swift.Double?, stanceAsymmetry: Swift.Double?, status: Swift.Int?)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case timestamp
    case steps
    case walkScore
    case distance
    case cadence
    case cadenceVariability
    case velocity
    case velocityVariability
    case consistency
    case strideLength
    case stepLengthLeft
    case stepLengthRight
    case stepLengthAsymmetry
    case baseWidth
    case doubleSupport
    case singleSupportRight
    case singleSupportLeft
    case stanceRight
    case stanceLeft
    case stanceAsymmetry
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct OneStepInAppWalkUI : Swift.Identifiable {
  public let id: Foundation.UUID
  public let timestamp: Foundation.Date?
  public let steps: Swift.Int?
  public let walkScore: Swift.Int?
  public let distance: Swift.Int?
  public let cadence: Swift.Int?
  public let cadenceVariability: Swift.Int?
  public let velocity: Swift.Int?
  public let velocityVariability: Swift.Int?
  public let consistency: Swift.Int?
  public let strideLength: Swift.Int?
  public let stepLengthLeft: Swift.Int?
  public let stepLengthRight: Swift.Int?
  public let stepLengthAsymmetry: Swift.Int?
  public let baseWidth: Swift.Int?
  public let doubleSupport: Swift.Int?
  public let singleSupportRight: Swift.Int?
  public let singleSupportLeft: Swift.Int?
  public let stanceRight: Swift.Int?
  public let stanceLeft: Swift.Int?
  public let stanceAsymmetry: Swift.Int?
  public let status: Swift.Int?
  public let isUploaded: Swift.Bool
  public typealias ID = Foundation.UUID
}
extension OneStep_iOS_SDK.BackgroundWalk {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OneStep_iOS_SDK.BackgroundWalk>
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var walkScore: Swift.Int16 {
    @objc get
    @objc set
  }
}
public enum OneStepSDKRecorderState {
  case idle
  case recording(uuid: Foundation.UUID)
  case finishedRecording
  case analyzing(state: OneStep_iOS_SDK.OneStepSDKRecorderState.AnalyzingState)
  case analyzedAndSavedSuccessfully
  case error(type: OneStep_iOS_SDK.OneStepSDKRecorderState.RecorderError)
  public enum AnalyzingState {
    case inProgress
    case generatingReport
    case preparingResult
    public static func == (a: OneStep_iOS_SDK.OneStepSDKRecorderState.AnalyzingState, b: OneStep_iOS_SDK.OneStepSDKRecorderState.AnalyzingState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct RecorderError {
    public var error: OneStep_iOS_SDK.OneStepSDKRecorderState.ErrorType
    public var message: Swift.String
    public init(error: OneStep_iOS_SDK.OneStepSDKRecorderState.ErrorType, message: Swift.String)
  }
  public enum ErrorType : Swift.String, Swift.Identifiable {
    case analysisTakingTime
    case noInternetConnection
    case generalError
    public var id: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias ID = Swift.String
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct OneStepBGSampleUI : Swift.Identifiable {
  public let id: Foundation.UUID
  public let perceiveTime: Foundation.Date
  public let activityType: OneStep_iOS_SDK.OneStepActivity
  public let isUploaded: Swift.Bool
  public let endDate: Foundation.Date
  public typealias ID = Foundation.UUID
}
public struct JSONEncoderClient {
}
extension OneStep_iOS_SDK.MotionMeasurement {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<OneStep_iOS_SDK.MotionMeasurement>
  @objc @NSManaged dynamic public var createdAt: Foundation.Date {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var custom_metadata: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var endDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isUploaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var parameters: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sensorsData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var error: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var result_state: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String {
    @objc get
    @objc set
  }
}
public enum OneStepActivity {
  case walk
  public static func == (a: OneStep_iOS_SDK.OneStepActivity, b: OneStep_iOS_SDK.OneStepActivity) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(BackgroundSample) public class BackgroundSample : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum OneStepError : Swift.Error {
  case SDKNotConfigured
  case failedToRetreiveApiToken
  case failedToRetreiveUserId
  public static func == (a: OneStep_iOS_SDK.OneStepError, b: OneStep_iOS_SDK.OneStepError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AuthTokenManager {
}
extension OneStep_iOS_SDK.HTTPMethodd : Swift.Equatable {}
extension OneStep_iOS_SDK.HTTPMethodd : Swift.Hashable {}
extension OneStep_iOS_SDK.HTTPMethodd : Swift.RawRepresentable {}
extension OneStep_iOS_SDK.ActivityType : Swift.Equatable {}
extension OneStep_iOS_SDK.ActivityType : Swift.Hashable {}
extension OneStep_iOS_SDK.WalkBG.CodingKeys : Swift.Equatable {}
extension OneStep_iOS_SDK.WalkBG.CodingKeys : Swift.Hashable {}
extension OneStep_iOS_SDK.WalkBG.CodingKeys : Swift.RawRepresentable {}
extension OneStep_iOS_SDK.OneStepSDKRecorderState.AnalyzingState : Swift.Equatable {}
extension OneStep_iOS_SDK.OneStepSDKRecorderState.AnalyzingState : Swift.Hashable {}
extension OneStep_iOS_SDK.OneStepSDKRecorderState.ErrorType : Swift.Equatable {}
extension OneStep_iOS_SDK.OneStepSDKRecorderState.ErrorType : Swift.Hashable {}
extension OneStep_iOS_SDK.OneStepSDKRecorderState.ErrorType : Swift.RawRepresentable {}
extension OneStep_iOS_SDK.OneStepActivity : Swift.Equatable {}
extension OneStep_iOS_SDK.OneStepActivity : Swift.Hashable {}
extension OneStep_iOS_SDK.OneStepError : Swift.Equatable {}
extension OneStep_iOS_SDK.OneStepError : Swift.Hashable {}
